#pragma kernel CSMain

RWTexture3D<float> ResultVolume;
Texture2D<float> OcclusionTex;
SamplerState sampler_OcclusionTex;

StructuredBuffer<float4> Observers; // float4(x, y, z, radius)
int ObserverCount;

float3 WorldMin;
float3 WorldMax;
int3 VolumeSize;

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x >= VolumeSize.x || id.y >= VolumeSize.y || id.z >= VolumeSize.z) return;

    float3 voxelNorm = (id + 0.5f) / VolumeSize;
    float3 worldPos = lerp(WorldMin, WorldMax, voxelNorm);

    float2 uvOcc = (worldPos.xz - WorldMin.xz) / (WorldMax.xz - WorldMin.xz);
    float occlusion = OcclusionTex.SampleLevel(sampler_OcclusionTex, uvOcc, 0).r;

    float visible = 0.0f;

    for (int i = 0; i < ObserverCount; ++i)
    {
        float3 observerPos = float3(Observers[i].x, Observers[i].y, Observers[i].z);
        float radius = Observers[i].w;

        float3 toVoxel = worldPos - observerPos;
        float dist = length(toVoxel);

        if (dist > radius)
            continue;

        if (occlusion < 0.5f)
        {
            // Obstacle voxel: reveal if within range, ignore line of sight
            visible = 1.0f;
            break;
        }
        else
        {
            // Non-obstacle: raymarch to check visibility
            float2 dirXZ = normalize(toVoxel.xz);
            float2 originXZ = observerPos.xz;
            float2 targetXZ = worldPos.xz;

            const int steps = 64;
            bool blocked = false;
            for (int s = 0; s < steps; ++s)
            {
                float t = s / (float)(steps - 1);
                float2 sampleXZ = lerp(originXZ, targetXZ, t);
                float2 sampleUV = (sampleXZ - WorldMin.xz) / (WorldMax.xz - WorldMin.xz);

                float occSample = OcclusionTex.SampleLevel(sampler_OcclusionTex, sampleUV, 0).r;
                if (occSample < 0.5f)
                {
                    blocked = true;
                    break;
                }
            }

            if (!blocked)
            {
                visible = 1.0f;
                break;
            }
        }
    }

    ResultVolume[id.xyz] = visible;
}
